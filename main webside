from django.contrib import admin
from .models import contact

# Register your models here.
admin.site.register(contact)
from django.apps import AppConfig


class MainAppConfig(AppConfig):
    name = "main_app"
    from django.forms import ModelForm
from .models import contact, Login
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User


class ContactForm(ModelForm):
    class Meta:
        model = contact
        fields = ["name", "email", "mobile_no", "relation"]
        Father = "Father"
        Mother = "Mother"
        Brother = "Brother"
        Sister = "Sister"
        Husband = "Husband"
        Friend = "Friend"
        Relative = "Relative"
        Other = "Other"
        relations = (
            (Father, "Father"),
            (Mother, "Mother"),
            (Brother, "Brother"),
            (Sister, "Sister"),
            (Husband, "Husband"),
            (Friend, "Friend"),
            (Relative, "Relative"),
            (Other, "Other"),
        )
        widgets = {
            "relation": forms.Select(
                choices=relations, attrs={"class": "form-control"}
            ),
        }


class UserCreateForm(UserCreationForm):
    email = forms.EmailField(
        required=True,
        label="Email",
        error_messages={"exists": "This Email already exists!"},
    )

    class Meta:
        model = User
        fields = ("username", "email", "password1", "password2")

    def save(self, commit=True):
        user = super(UserCreateForm, self).save(commit=False)
        user.email = self.cleaned_data["email"]
        if commit:
            user.save()
        return user

    def clean_email(self):
        if User.objects.filter(email=self.cleaned_data["email"]).exists():
            raise forms.ValidationError(self.fields["email"].error_messages["exists"])
        return self.cleaned_data["email"]


class LoginForm(ModelForm):
    class Meta:
        model = Login
        fields = ["Username_or_Email", "password"]
        widgets = {
            "password": forms.PasswordInput,
        }
        
        import requests

res = requests.get("https://ipinfo.io/")
data = res.json()

city = data["city"]
state = data["region"]
location = data["loc"].split(",")
lat = location[0]
log = location[1]
import smtplib
from email.utils import formataddr
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart


# Before using your email,  please ensure that you have set you gmail account to enable "less secure apps"
# Recheck this step that you have enabled the less secure app


def send_email(name, dest, link):
    server = smtplib.SMTP("smtp.gmail.com", 587)  # Gmail SMTP port (TLS)
    server.starttls()

    # Enter your Email and Password
    server.login("Email", "Password")
    email_html = open("main_app/templates/main_app/email.html")
    email_body = email_html.read().format(name=name, link=link)
    msg = MIMEMultipart()
    msg["Subject"] = "EMERGENCY"
    msg.attach(MIMEText(email_body, "html"))

    # Again enter your Email ID
    msg["From"] = formataddr(("TEAM RESCUE", "Email"))

    # One last time add your email
    server.sendmail("Email", dest, msg.as_string())
    server.quit()
    from django.db import models
from django.contrib.auth.models import User


# Create your models here.
class contact(models.Model):

    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="contact", null=True
    )
    name = models.CharField(max_length=100)
    email = models.EmailField()
    mobile_no = models.CharField(max_length=15)
    Father = "Father"
    Mother = "Mother"
    Brother = "Brother"
    Sister = "Sister"
    Husband = "Husband"
    Friend = "Friend"
    Relative = "Relative"
    Other = "Other"
    relations = (
        (Father, "Father"),
        (Mother, "Mother"),
        (Brother, "Brother"),
        (Sister, "Sister"),
        (Husband, "Husband"),
        (Friend, "Friend"),
        (Relative, "Relative"),
        (Other, "Other"),
    )
    relation = models.CharField(max_length=10, choices=relations, default=Other)

    def _str_(self):
        return self.name


class Login(models.Model):

    Username_or_Email = models.CharField(max_length=100)
    password = models.CharField(max_length=32)
    from django.test import TestCase  # noqa

# Create your tests here.
from django.urls import path
from . import views
from .views import VerificationView
from django.contrib.auth import views as auth_views


app_name = "main_app"

urlpatterns = [
    path("", views.home, name="home"),
    path("home/", views.home, name="home"),
    path("register/", views.register, name="register"),
    path("logout/", views.logout_request, name="logout"),
    path("login/", views.login_request, name="login"),
    path("delete_account/<str:username>", views.delete_account, name="delete_account"),
    path("emergency_contact/", views.emergency_contact, name="emergency_contact"),
    path("create_contact/", views.create_contact, name="create_contact"),
    path("update_contact/<str:pk>/", views.update_contact, name="update_contact"),
    path("delete_contact/<str:pk>/", views.delete_contact, name="delete_contact"),
    path("emergency/", views.emergency, name="emergency"),
    path("helpline_numbers/", views.helpline_numbers, name="helpline_numbers"),
    path("women_laws/", views.women_laws, name="women_laws"),
    path('women_rights/', views.women_rights, name='women_rights'),
    path('ngo_details/', views.ngo_details, name='ngo_details'),
    path('FAQ/', views.FAQ, name='FAQ'),
    path('gallery/', views.gallery, name='gallery'),
    path('email_sent/', views.send_email, name='email_sent'),
    path("developers/", views.developers, name="developers"),
    path("contact_user/", views.contact_user, name="contact_user"),
    path("404_error/", views.page_not_found, name="404_error"),
    path("activate/<uidb64>/<token>", VerificationView.as_view(), name="activate"),
    path(
        "reset_password/",
        auth_views.PasswordResetView.as_view(
            template_name="main_app/password_reset.html"
        ),
        name="reset_password",
    ),
    path(
        "reset_password_sent/",
        auth_views.PasswordResetDoneView.as_view(
            template_name="main_app/password_reset_sent.html"
        ),
        name="password_reset_done",
    ),
    path(
        "reset/<uidb64>/<token>/",
        auth_views.PasswordResetConfirmView.as_view(
            template_name="main_app/password_reset_form.html"
        ),
        name="password_reset_confirm",
    ),
    path(
        "reset_password_complete/",
        auth_views.PasswordResetCompleteView.as_view(
            template_name="main_app/password_reset_done.html"
        ),
        name="password_reset_complete",
    ),
    path("change_password/", views.change_password, name="change_password"),
    path("check_username", views.check_username, name="check_username"),
    path("check_email", views.check_email, name="check_email"),
]
import pywhatkit as kit
import pyautogui as pg
from datetime import datetime, timedelta


def send_whatsapp(numbers, name, link):
    message = f"""ðŸš¨ðŸ›‘ Emergency ðŸ›‘ðŸš¨
{name} is in emergency and need your help immediately.
Click the link below for location
{link}"""
    time = str(datetime.now() + timedelta(seconds=90))
    hour, minute = time[11:13], time[14:16]
    if hour[0] == "0":
        hour = hour[1]
    if minute[0] == "0":
        minute = minute[1]
    hour, minute = int(hour), int(minute)
    for x in range(len(numbers)):
        kit.sendwhatmsg(numbers[x], message, hour, minute + int(x), wait_time=20)
        pg.press("enter")
